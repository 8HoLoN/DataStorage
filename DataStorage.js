/*!* @preserve
 *
 * https://github.com/8HoLoN/DataStorage
 * @version: 0.2.00 ( June 2015 )
 * @author 8HoLoN / https://github.com/8HoLoN/
 * < 8holon [at] gmail.com >
 * Copyright (c) 2011-2015 Alexandre REMY
 */
;(function(_g){

  function DataStorage(_args){
    _args=_args||{};

    if( typeof JSON ==='undefined'){
      throw new Error('JSON object is not supported');
    }

    if( typeof localStorage === 'undefined'){
      throw new Error('localStorage object is not supported');
    }

    this.autogeneratedPrefix = typeof _args.prefix==='undefined'||false;
    if( _args.prefix===false ){
      this.prefix = '';
    }else{
      this.prefix = _args.prefix || Math.random().toString(36).substr(2, 5);
      this.prefix += '.';
    }

    this.prefixes=[];
    try{
      var _prefixes = JSON.parse(localStorage.getItem('DataStoragePrefixes'));
      if( _isArray(_prefixes) ){
        this.prefixes = _prefixes;
      }
    }catch(e){
    }

    var _addedFlag = false;
    for( var i=0, l=this.prefixes.length ; i < l ; i++){
      if( this.prefixes[i] === this.prefix){
        _addedFlag = true;
        break;
      }
    }
    if( !_addedFlag ){// replace by if(this.prefixes.indexOf(this.prefix)==-1)
      this.prefixes.push(this.prefix);
      localStorage.DataStoragePrefixes = JSON.stringify(this.prefixes);
    }

  }

  DataStorage.prototype.setItem = function(_key,_value,_opts) {
    _opts = _opts || {};
    if( _opts.json === false ){
      localStorage.setItem(this.prefix+_key,_value);
    }else{
      localStorage.setItem(this.prefix+_key,JSON.stringify(_value));
    }
    return this;
  };

  DataStorage.prototype.getItem = function(_key,_opts) {
    _opts = _opts || {};
    if( _opts.json === false ){
      return localStorage.getItem(this.prefix+_key);
    }else{
      return JSON.parse(localStorage.getItem(this.prefix+_key));
    }
  };

  DataStorage.prototype.clear = function(_args) {
    _args = _args||{};

    if(typeof _args.key==='undefined'){
      var _regex = new RegExp( '^' + this.prefix );
      for( var _k in localStorage){
        var _match = _k.match(_regex);
        if( _match!==null ){
          localStorage.removeItem(_match.input);
        }
      }
    }else{
      localStorage.removeItem(this.prefix+_args.key);
    }
  };

  DataStorage.prototype.clearLocalStorage = function() {
    localStorage.clear();
  };

  function _isArray(_o) {
    return Object.prototype.toString.call(_o) === '[object Array]';
  }

  _g.DataStorage = DataStorage;

})(window);
